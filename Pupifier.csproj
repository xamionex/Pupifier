<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net48</TargetFramework>
    <AssemblyName>amione.Pupifier</AssemblyName>
    <Product>Pupifier</Product>
    <ProductDescription>[h2]Lets you become a slugpup in Rain World with a push of a button[/h2]
This mod was made specifically for meadow but works for non-meadow as well

[hr][/hr]
[h3]Known issues[/h3]
[list]
  [*]Meadow issues (not related to my mod): grabbing players and breaking if you go thru a pipe, piggybacking desync (toggle grabbability in settings)
  [*]Meadow Gamemode: Not working; henpemaz has coded it so that pups are not allowed in the meadow gamemode, enable locally in toggles settings
[/list]

[hr][/hr]
[h3]Features[/h3]
[list]
[*] Transform into a slugpup dynamically, with a hotkey, even when in-game
[*] Change your stats based on slugpup relativity
[*] Supports controller input as a hotkey to change
[*] Supports Rain Meadow
[*] Supports Modded Slugcats
[/list]

[hr][/hr]
[h3]Q&amp;A[/h3]
[list] 
  [*] Does this mod change gameplay? Yes, and a ton, you will behave almost like a slugpup, with some changes, for example, it's all relative so if you pick rivulet you will be faster than a normal slugpup
  [*] Is it only cosmetic? No, you could try to make it, I haven't tested much but there is a toggle in the stats settings to turn off changing stats, that way you will still be small but no stats will be changed
  [*] What is configurable? Every stat you have as a player, along with holding double spears as spearmaster or holding 2 items no matter what or not letting people grab you
[/list]

[hr][/hr]
[h3]Credits[/h3]
- amione - Creator
- youbitchoc - For helping in development
- henpemaz - For Rain Meadow
- phanie - For the art
- Maxi Mol - For Mouse Drag code
- LDani, simichan1227 - For testing the s**t out of my mod (It was kinda encouraging)

[hr][/hr]
[h3]Report Issues on github please! https://github.com/xamionex/Pupifier/issues/new[/h3]
    </ProductDescription>
    <ModVersion>2.1.1</ModVersion>
    <Version>2.0.8</Version>
    <LangVersion>10.0</LangVersion>
    <Nullable>enable</Nullable>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <Configurations>Debug;Release</Configurations>
    <RootNamespace>Pupifier</RootNamespace>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DefineConstants>$(DefineConstants);TRACE</DefineConstants>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <DefineConstants>$(DefineConstants);TRACE</DefineConstants>
  </PropertyGroup>

  <PropertyGroup>
    <PathMap>$(MSBuildThisFileDirectory.Replace(',', ',,').Replace('=', '=='))=/</PathMap>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="lib\*.dll" Private="False" />
  </ItemGroup>

  <ItemGroup>
    <None Remove=".gitattributes" />
  </ItemGroup>

  <ItemGroup>
    <Compile Update="Properties\Settings.Designer.cs">
      <DesignTimeSharedInput>True</DesignTimeSharedInput>
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <None Update="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
  </ItemGroup>

  <ItemGroup>
    <Content Include="Pupifier.sln" />
  </ItemGroup>

  <Target Name="PreBuild" BeforeTargets="PreBuildEvent">
    <ItemGroup>
      <PluginInfoLines Include="internal static class PluginInfo {" />
      <PluginInfoLines Include="    public const string PluginGUID = &quot;$(AssemblyName)&quot;%3B" />
      <PluginInfoLines Include="    public const string PluginName = &quot;$(Product)&quot;%3B" />
      <PluginInfoLines Include="    public const string PluginVersion = &quot;$(ModVersion)&quot;%3B" />
      <PluginInfoLines Include="}" />
    </ItemGroup>
    <WriteLinesToFile File="$(ProjectDir)PluginInfo.cs" Lines="@(PluginInfoLines)" Overwrite="true" />
  </Target>

  <Target Name="PostBuild" AfterTargets="PostBuildEvent">
    <ItemGroup>
      <BuildFiles Include="$(Outdir)\*" />
    </ItemGroup>
    <Copy SourceFiles="@(BuildFiles)" DestinationFolder="$(ProjectDir)$(RootNamespace)\plugins" />
  </Target>

  <UsingTask TaskName="RegexReplaceTask" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" TaskFactory="RoslynCodeTaskFactory">
    <ParameterGroup>
      <InputFile />
      <VersionValue Required="true" />
      <AssemblyName Required="true" />
      <ProductDescription Required="true" />
      <Product Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          string content = File.ReadAllText(InputFile);

          // Replace "version"
          content = Regex.Replace(content, @"""version"":\s*""[^""]*""", $@"""version"": ""{VersionValue}""");

          // Replace "id"
          content = Regex.Replace(content, @"""id"":\s*""[^""]*""", $@"""id"": ""{AssemblyName}""");

          // Replace "name"
          content = Regex.Replace(content, @"""name"":\s*""[^""]*""", $@"""name"": ""{Product}""");

          // Replace "description"
          content = Regex.Replace(content, @"""description"":\s*""[^""]*""", $@"""description"": ""{ProductDescription}""");

          File.WriteAllText(InputFile, content);
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="UpdateModInfo" AfterTargets="Build">
    <RegexReplaceTask 
      InputFile="$(ProjectDir)$(RootNamespace)\modinfo.json"
      VersionValue="$(ModVersion)"
      AssemblyName="$(AssemblyName)"
      ProductDescription="$(ProductDescription)"
      Product="$(Product)" />
  </Target>

  <Target Name="ZipProjectDirectory" AfterTargets="Build">
    <Exec Command="zip -r $(RootNamespace).zip $(RootNamespace)/*" Condition="'$(OS)' == 'Unix'" />
    <Exec Command="powershell -Command &quot;Compress-Archive -Path '$(ProjectDir)$(RootNamespace)' -DestinationPath '$(ProjectDir)$(RootNamespace).zip' -Force&quot;" Condition="'$(OS)' == 'Windows_NT'" />
  </Target>
</Project>